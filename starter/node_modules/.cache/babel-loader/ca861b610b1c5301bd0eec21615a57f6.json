{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\Egy4wd\\\\MyReads\\\\starter\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { Routes, Route } from 'react-router-dom';\nimport Shelves from \"./components/Shelves\";\nimport Search from \"./components/Search\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [allBooks, setAllBooks] = useState([]);\n  const [currentlyReading, setCurrentlyReading] = useState([]);\n  const [wantToRead, setWantToRead] = useState([]);\n  const [read, setRead] = useState([]);\n\n  const updateShelf = (book, shelf) => {\n    if (shelf === \"currentlyReading\") {\n      const updateCurrentlyReading = async () => {\n        const response = await BooksAPI.update(book, \"currentlyReading\");\n        setCurrentlyReading(response);\n      };\n\n      updateCurrentlyReading();\n    } else if (shelf === \"wantToRead\") {\n      const updateWantToRead = async () => {\n        const response = await BooksAPI.update(book, \"wantToRead\");\n        setWantToRead(response);\n      };\n\n      updateWantToRead();\n    } else if (shelf === \"read\") {\n      const updateRead = async () => {\n        const response = await BooksAPI.update(book, \"read\");\n        setRead(response);\n      };\n\n      updateRead();\n    }\n  };\n\n  useEffect(() => {\n    const getBooks = async () => {\n      const response = await BooksAPI.getAll();\n      setAllBooks(response);\n    };\n\n    getBooks();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Shelves, {\n          currentlyReading: currentlyReading,\n          wantToRead: wantToRead,\n          read: read\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 36\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/search\",\n        element: /*#__PURE__*/_jsxDEV(Search, {\n          books: allBooks\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Ko4MXSLrjQcSwOylLznQ0X+TzWY=\");\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Work/Egy4wd/MyReads/starter/src/App.js"],"names":["useState","useEffect","Routes","Route","Shelves","Search","BooksAPI","App","allBooks","setAllBooks","currentlyReading","setCurrentlyReading","wantToRead","setWantToRead","read","setRead","updateShelf","book","shelf","updateCurrentlyReading","response","update","updateWantToRead","updateRead","getBooks","getAll"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA6B,kBAA7B;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM,CAACU,gBAAD,EAAmBC,mBAAnB,IAA0CX,QAAQ,CAAC,EAAD,CAAxD;AAEA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMgB,WAAW,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAEnC,QAAGA,KAAK,KAAK,kBAAb,EACA;AACE,YAAMC,sBAAsB,GAAG,YAAY;AACzC,cAAMC,QAAQ,GAAG,MAAMd,QAAQ,CAACe,MAAT,CAAgBJ,IAAhB,EAAsB,kBAAtB,CAAvB;AACAN,QAAAA,mBAAmB,CAACS,QAAD,CAAnB;AACD,OAHD;;AAIAD,MAAAA,sBAAsB;AACvB,KAPD,MASK,IAAGD,KAAK,KAAK,YAAb,EACL;AACE,YAAMI,gBAAgB,GAAG,YAAY;AACnC,cAAMF,QAAQ,GAAG,MAAMd,QAAQ,CAACe,MAAT,CAAgBJ,IAAhB,EAAsB,YAAtB,CAAvB;AACAJ,QAAAA,aAAa,CAACO,QAAD,CAAb;AACD,OAHD;;AAIAE,MAAAA,gBAAgB;AACjB,KAPI,MASA,IAAGJ,KAAK,KAAK,MAAb,EACL;AACE,YAAMK,UAAU,GAAG,YAAY;AAC7B,cAAMH,QAAQ,GAAG,MAAMd,QAAQ,CAACe,MAAT,CAAgBJ,IAAhB,EAAsB,MAAtB,CAAvB;AACAF,QAAAA,OAAO,CAACK,QAAD,CAAP;AACD,OAHD;;AAIAG,MAAAA,UAAU;AACX;AAEF,GA7BD;;AA+BAtB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,QAAQ,GAAG,YAAY;AAC3B,YAAMJ,QAAQ,GAAG,MAAMd,QAAQ,CAACmB,MAAT,EAAvB;AACAhB,MAAAA,WAAW,CAACW,QAAD,CAAX;AAGD,KALD;;AAOAI,IAAAA,QAAQ;AAIT,GAZQ,EAYN,EAZM,CAAT;AAeA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE,QAAC,MAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAgB,QAAA,OAAO,eAAI,QAAC,OAAD;AAAS,UAAA,gBAAgB,EAAEd,gBAA3B;AAA6C,UAAA,UAAU,EAAEE,UAAzD;AAAqE,UAAA,IAAI,EAAEE;AAA3E;AAAA;AAAA;AAAA;AAAA;AAA3B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,SAAZ;AAAsB,QAAA,OAAO,eAAI,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAEN;AAAf;AAAA;AAAA;AAAA;AAAA;AAAjC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAjEQD,G;;KAAAA,G;AAiER;AAED,eAAeA,GAAf","sourcesContent":["import \"./App.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Routes, Route} from 'react-router-dom'\r\nimport Shelves from \"./components/Shelves\";\r\nimport Search from \"./components/Search\";\r\nimport * as BooksAPI from \"./BooksAPI\"\r\n\r\nfunction App() {\r\n  \r\n  const [allBooks, setAllBooks] = useState([]);\r\n  \r\n  const [currentlyReading, setCurrentlyReading] = useState([]);\r\n\r\n  const [wantToRead, setWantToRead] = useState([]);\r\n\r\n  const [read, setRead] = useState([]);\r\n\r\n  const updateShelf = (book, shelf) => {\r\n\r\n    if(shelf === \"currentlyReading\")\r\n    {\r\n      const updateCurrentlyReading = async () => {\r\n        const response = await BooksAPI.update(book, \"currentlyReading\");\r\n        setCurrentlyReading(response);\r\n      }\r\n      updateCurrentlyReading();\r\n    }\r\n\r\n    else if(shelf === \"wantToRead\")\r\n    {\r\n      const updateWantToRead = async () => {\r\n        const response = await BooksAPI.update(book, \"wantToRead\");\r\n        setWantToRead(response);\r\n      }\r\n      updateWantToRead();\r\n    }\r\n\r\n    else if(shelf === \"read\")\r\n    {\r\n      const updateRead = async () => {\r\n        const response = await BooksAPI.update(book, \"read\");\r\n        setRead(response);\r\n      }\r\n      updateRead();\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getBooks = async () => {\r\n      const response = await BooksAPI.getAll();\r\n      setAllBooks(response);\r\n\r\n     \r\n    };\r\n\r\n    getBooks();\r\n\r\n    \r\n\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Routes>\r\n        <Route path=\"/\" element = {<Shelves currentlyReading={currentlyReading} wantToRead={wantToRead} read={read} />}/>\r\n        <Route path=\"/search\" element = {<Search books={allBooks} />}/>\r\n      </Routes>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}